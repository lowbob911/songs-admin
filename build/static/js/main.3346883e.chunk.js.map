{"version":3,"sources":["pages/dashboard/SongsList.js","pages/dashboard/Dashboard.js","components/Loader.js","App.js","index.js"],"names":["SongsList","songs","onSelect","className","scope","map","song","number","title","Button","variant","onClick","MODE_NEW","MODE_UPDATE","Dashboard","params","useState","setSongs","currentNumber","setCurrentNumber","mode","setMode","setTitle","text","setText","validationErrors","setValidationErrors","updateSong","errors","getCurrentContent","getPlainText","validateForm","Object","keys","length","find","s","updated","Date","now","set","ref","db","then","alert","useEffect","songsRef","onValue","snapshot","val","EditorState","createWithText","htmlFor","type","id","placeholder","value","onChange","event","target","editorState","window","confirm","remove","srcDoc","Loader","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","setDb","app","initializeApp","getDatabase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3346883e.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\r\n\r\nexport default function SongsList({songs, onSelect}) {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Action</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {songs.map(song => (\r\n                <tr key={song.number}>\r\n                    <th>{song.number}</th>\r\n                    <td>{song.title}</td>\r\n                    <td>\r\n                        <Button variant=\"primary\" onClick={() => onSelect(song)}>Select</Button>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { onValue, ref, set, remove} from \"firebase/database\";\r\nimport {Editor, EditorState} from 'draft-js';\r\nimport SongsList from \"./SongsList\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst MODE_NEW = \"NEW\";\r\nconst MODE_UPDATE = \"UPDATE\";\r\n\r\nexport default function Dashboard(params) {\r\n    const [songs, setSongs] = useState([]);\r\n\r\n    const [currentNumber, setCurrentNumber] = useState(null);\r\n    const [mode, setMode] = useState(null);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const [validationErrors, setValidationErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n        const songsRef = ref(params.db, 'songs');\r\n        onValue(songsRef, (snapshot) => {\r\n            setSongs(snapshot.val());\r\n        });\r\n    }, []);\r\n\r\n    function setCurrentSong(song){\r\n        setMode(MODE_UPDATE);\r\n        setCurrentNumber(song.number);\r\n        setTitle(song.title);\r\n        setText(EditorState.createWithText(song?.text || \"\"));\r\n    }\r\n\r\n    function setCreateMode() {\r\n        setMode(MODE_NEW);\r\n        setTitle(\"\");\r\n        setText(EditorState.createWithText(\"\"));\r\n        setCurrentNumber(null);\r\n    }\r\n\r\n    function updateSong() {\r\n        if(currentNumber) {\r\n            const errors = validateForm();\r\n            setValidationErrors(errors);\r\n            if(Object.keys(errors).length > 0) {\r\n                return;\r\n            }\r\n\r\n            const song = {...songs.find(s => s && s.number === currentNumber)};\r\n\r\n            song.title = title;\r\n            song.text = text.getCurrentContent().getPlainText();\r\n            song.updated = Date.now();\r\n\r\n            set(ref(params.db, 'songs/' + currentNumber), song)\r\n                .then(() => {\r\n                    alert(\"Updated\")\r\n                });\r\n        }\r\n    }\r\n\r\n    function createSong() {\r\n\r\n    }\r\n\r\n    function validateForm() {\r\n        const errors = {};\r\n\r\n        if (!title) {\r\n            errors.title = true;\r\n        }\r\n\r\n        if(!text.getCurrentContent().getPlainText()) {\r\n            errors.text = true;\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    function deleteSong(number) {\r\n        if(window.confirm(\"Are you sure want to delete Song?\")) {\r\n            remove(ref(params.db, 'songs/' + number))\r\n                .then(() => alert(\"deleted!\"))\r\n        }\r\n    }\r\n\r\n    function myBlockRenderer(contentBlock) {\r\n        const text = contentBlock.getText();\r\n\r\n        if (text === 'Слава Богу! Слава Богу!') {\r\n            return {\r\n                component: <SongsList/>,\r\n                editable: false\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-lg-4\">\r\n                    <div className=\"card\">\r\n                        <h5 className=\"card-header\">\r\n                            Songs List\r\n                            <Button className=\"float-end\" variant=\"success\" onClick={setCreateMode}>Create</Button>\r\n                        </h5>\r\n                        <div className=\"card-body\">\r\n                            <SongsList\r\n                                songs={songs}\r\n                                onSelect={setCurrentSong}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-lg-4\">\r\n                    {(mode === MODE_NEW || (mode === MODE_UPDATE && currentNumber)) && (\r\n                        <div className=\"card\">\r\n                            <h5 className=\"card-header\">\r\n                                {mode === MODE_NEW ? 'Create Song' : 'Update Song '+currentNumber}\r\n                            </h5>\r\n                            <div className=\"card-body\">\r\n                                <div>\r\n                                    <label htmlFor=\"titleInput\" className=\"form-label\">Title:</label>\r\n                                    <input type=\"text\" className={`form-control ${validationErrors.title && 'is-invalid'}`} id=\"titleInput\"\r\n                                           placeholder=\"Song Title\" value={title}\r\n                                           onChange={(event) => setTitle(event.target.value)}/>\r\n                                    <div id=\"validationServer05Feedback\" className=\"invalid-feedback\">\r\n                                        Should not be empty\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    Text:\r\n                                    <div className={`${validationErrors.text && 'is-invalid'}`}>\r\n                                        <Editor editorState={text}\r\n                                                onChange={setText}\r\n                                                className={\"test\"}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"validationServer05Feedback\" className=\"invalid-feedback\">\r\n                                        Should not be empty\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-1 text-center\">\r\n                                    {mode === MODE_UPDATE &&\r\n                                    <>\r\n                                        <Button variant=\"primary\" className=\"me-2\" onClick={() => updateSong(currentNumber)}>Update</Button>\r\n                                        <Button variant=\"danger\" onClick={() => deleteSong(currentNumber)}>Delete</Button>\r\n                                    </>\r\n                                    }\r\n                                    {mode === MODE_NEW &&\r\n                                    <>\r\n                                        <Button variant=\"primary\" onClick={() => createSong()}>Create</Button>\r\n                                    </>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"col-12 col-lg-4\">\r\n                    {currentNumber && <iframe className=\"w-100 h-100\" srcDoc={`<div style=\"text-align: center; white-space: pre-wrap\">${text.getCurrentContent().getPlainText()}</div>`}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default function Loader() {\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useEffect, useState} from \"react\";\nimport {initializeApp} from \"firebase/app\";\nimport {getDatabase} from \"firebase/database\";\nimport Loader from \"./components/Loader\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB6jgAYZFaJhpzVcoZ9hox6h6iVGq6Ozqo\",\n  authDomain: \"songreader-f7e8c.firebaseapp.com\",\n  databaseURL: \"https://songreader-f7e8c.firebaseio.com\",\n  projectId: \"songreader-f7e8c\",\n  storageBucket: \"songreader-f7e8c.appspot.com\",\n  messagingSenderId: \"703302008821\",\n  appId: \"1:703302008821:web:826c661d4e80de2a732abc\"\n};\n\nconst App = () => {\n  const [db, setDb] = useState(null);\n\n  useEffect(() => {\n    const app = initializeApp(firebaseConfig);\n    const db = getDatabase(app);\n\n    setDb(db);\n  }, []);\n\n  if(!db) {\n    return <Loader/>\n  }\n\n  return (\n      <Dashboard\n          db={db}\n      />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}