{"version":3,"sources":["pages/dashboard/SongsList.js","pages/dashboard/Dashboard.js","components/Loader.js","App.js","index.js"],"names":["SongsList","songs","onSelect","className","scope","map","song","number","title","Button","variant","onClick","MODE_NEW","MODE_UPDATE","previewStyles","Dashboard","params","useState","setSongs","currentNumber","setCurrentNumber","mode","setMode","setTitle","text","setText","userText","setUserText","validationErrors","setValidationErrors","populateSong","updated","Date","now","validateForm","errors","useEffect","songsRef","ref","db","onValue","snapshot","val","s","textToSet","getCurrentContent","getPlainText","replace","a","match","EditorState","createWithText","htmlFor","type","id","placeholder","value","onChange","event","target","editorState","Object","keys","length","find","set","then","alert","updateSong","window","confirm","remove","nextNumber","Math","max","createSong","srcDoc","Loader","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","setDb","app","initializeApp","getDatabase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42c6b517.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\r\n\r\nexport default function SongsList({songs, onSelect}) {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Action</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {songs.map(song => (\r\n                <tr key={song.number}>\r\n                    <th>{song.number}</th>\r\n                    <td>{song.title}</td>\r\n                    <td>\r\n                        <Button variant=\"primary\" onClick={() => onSelect(song)}>Select</Button>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { onValue, ref, set, remove} from \"firebase/database\";\r\nimport {Editor, EditorState} from 'draft-js';\r\nimport SongsList from \"./SongsList\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst MODE_NEW = \"NEW\";\r\nconst MODE_UPDATE = \"UPDATE\";\r\n\r\nconst chords = `span.chunk { position: relative; display: inline-flex; flex-direction: column; vertical-align: bottom; } span.chunk:before { font-size: 0.6em; content: attr(data-chord); position: relative; vertical-align: bottom;`;\r\nconst previewStyles = `div {margin: 30px 20px; text-align: center; white-space: pre-wrap;} ${chords}`;\r\n\r\nexport default function Dashboard(params) {\r\n    const [songs, setSongs] = useState([]);\r\n\r\n    const [currentNumber, setCurrentNumber] = useState(null);\r\n    const [mode, setMode] = useState(null);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [userText, setUserText] = useState(\"\");\r\n\r\n    const [validationErrors, setValidationErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n        const songsRef = ref(params.db, 'songs');\r\n        onValue(songsRef, (snapshot) => {\r\n            setSongs(snapshot.val().map(s => ({...s})));\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let textToSet = \"\";\r\n        if (userText) {\r\n            textToSet = userText.getCurrentContent().getPlainText().replace(/{.*?{!}/g, a => {\r\n                return `<span class=\"chunk\" data-chord=\"${a.match(/{([^!]*?(?=}))/)[1]}\">${a.match(/}(.*?(?={!}))/)[1]}</span>`\r\n            })\r\n        }\r\n        setText(textToSet);\r\n    }, [userText]);\r\n\r\n    function setCurrentSong(song){\r\n        setMode(MODE_UPDATE);\r\n        setCurrentNumber(song.number);\r\n        setTitle(song.title);\r\n\r\n        const text = song.text.replace(/<span class=\"chunk\".*?<\\/span>/g, function(a){\r\n            return `{${a.match(/data-chord=\"(.*?(?=\"))/)[1]}}${a.match(/<span class=\"chunk\".*>(.*?(?=<))/)[1]}{!}`;\r\n        });\r\n\r\n        setUserText(EditorState.createWithText(text));\r\n    }\r\n\r\n    function setCreateMode() {\r\n        setMode(MODE_NEW);\r\n        setTitle(\"\");\r\n        setUserText(EditorState.createWithText(\"\"));\r\n        setCurrentNumber(null);\r\n    }\r\n\r\n    function updateSong() {\r\n        if(currentNumber) {\r\n            const errors = validateForm();\r\n            setValidationErrors(errors);\r\n            if(Object.keys(errors).length > 0) {\r\n                return;\r\n            }\r\n\r\n            const song = {...songs.find(s => s && s.number === currentNumber)};\r\n\r\n            populateSong(song);\r\n\r\n            set(ref(params.db, 'songs/' + currentNumber), song)\r\n                .then(() => {\r\n                    alert(\"Updated\")\r\n                });\r\n        }\r\n    }\r\n\r\n    function createSong() {\r\n        if(mode === MODE_NEW) {\r\n            const errors = validateForm();\r\n            setValidationErrors(errors);\r\n            if(Object.keys(errors).length > 0) {\r\n                return;\r\n            }\r\n\r\n            const nextNumber = (songs.length > 0 ? Math.max(...songs.map(s => s.number)) : 0) + 1;\r\n\r\n            const song = {\r\n                number: nextNumber\r\n            };\r\n            populateSong(song);\r\n\r\n            set(ref(params.db, 'songs/' + nextNumber), song)\r\n                .then(() => {\r\n                    alert(\"Created\");\r\n                    setMode(MODE_UPDATE);\r\n                    setCurrentNumber(nextNumber);\r\n                });\r\n        }\r\n    }\r\n\r\n    function populateSong(song) {\r\n        song.title = title;\r\n        song.text = text;\r\n        song.updated = Date.now()\r\n    }\r\n\r\n    function validateForm() {\r\n        const errors = {};\r\n\r\n        if (!title) {\r\n            errors.title = true;\r\n        }\r\n\r\n        if(!text) {\r\n            errors.text = true;\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    function deleteSong(number) {\r\n        if(window.confirm(\"Are you sure want to delete Song?\")) {\r\n            remove(ref(params.db, 'songs/' + number))\r\n                .then(() => {\r\n                    alert(\"deleted!\");\r\n                    setCurrentNumber(null);\r\n                    setTitle(\"\");\r\n                    setUserText(\"\");\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-lg-4\">\r\n                    <div className=\"card\">\r\n                        <h5 className=\"card-header\">\r\n                            Songs List\r\n                            <Button className=\"float-end\" variant=\"success\" onClick={setCreateMode}>Create</Button>\r\n                        </h5>\r\n                        <div className=\"card-body\">\r\n                            <SongsList\r\n                                songs={songs}\r\n                                onSelect={setCurrentSong}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-lg-4\">\r\n                    {(mode === MODE_NEW || (mode === MODE_UPDATE && currentNumber)) && (\r\n                        <div className=\"card\">\r\n                            <h5 className=\"card-header\">\r\n                                {mode === MODE_NEW ? 'Create Song' : 'Update Song '+currentNumber}\r\n                            </h5>\r\n                            <div className=\"card-body\">\r\n                                <div>\r\n                                    <label htmlFor=\"titleInput\" className=\"form-label\">Title:</label>\r\n                                    <input type=\"text\" className={`form-control ${validationErrors.title && 'is-invalid'}`} id=\"titleInput\"\r\n                                           placeholder=\"Song Title\" value={title}\r\n                                           onChange={(event) => setTitle(event.target.value)}/>\r\n                                    <div id=\"validationServer05Feedback\" className=\"invalid-feedback\">\r\n                                        Should not be empty\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    Text:\r\n                                    <div className={`${validationErrors.text && 'is-invalid'}`}>\r\n                                        <Editor editorState={userText}\r\n                                                onChange={setUserText}\r\n                                                className={\"test\"}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"validationServer05Feedback\" className=\"invalid-feedback\">\r\n                                        Should not be empty\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-1 text-center\">\r\n                                    {mode === MODE_UPDATE &&\r\n                                    <>\r\n                                        <Button variant=\"primary\" className=\"me-2\" onClick={() => updateSong(currentNumber)}>Update</Button>\r\n                                        <Button variant=\"danger\" onClick={() => deleteSong(currentNumber)}>Delete</Button>\r\n                                    </>\r\n                                    }\r\n                                    {mode === MODE_NEW &&\r\n                                    <>\r\n                                        <Button variant=\"primary\" onClick={() => createSong()}>Create</Button>\r\n                                    </>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"col-12 col-lg-4\">\r\n                    {(mode === MODE_NEW || (mode === MODE_UPDATE && currentNumber)) && <iframe className=\"w-100 h-100\" srcDoc={`<style>${previewStyles}</style><div>${text}</div>`}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default function Loader() {\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useEffect, useState} from \"react\";\nimport {initializeApp} from \"firebase/app\";\nimport {getDatabase} from \"firebase/database\";\nimport Loader from \"./components/Loader\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB6jgAYZFaJhpzVcoZ9hox6h6iVGq6Ozqo\",\n  authDomain: \"songreader-f7e8c.firebaseapp.com\",\n  databaseURL: \"https://songreader-f7e8c.firebaseio.com\",\n  projectId: \"songreader-f7e8c\",\n  storageBucket: \"songreader-f7e8c.appspot.com\",\n  messagingSenderId: \"703302008821\",\n  appId: \"1:703302008821:web:826c661d4e80de2a732abc\"\n};\n\nconst App = () => {\n  const [db, setDb] = useState(null);\n\n  useEffect(() => {\n    const app = initializeApp(firebaseConfig);\n    const db = getDatabase(app);\n\n    setDb(db);\n  }, []);\n\n  if(!db) {\n    return <Loader/>\n  }\n\n  return (\n      <Dashboard\n          db={db}\n      />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}